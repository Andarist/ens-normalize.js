function bytes_from_base64(s) {
	return Uint8Array.from(atob(s), c => c.charCodeAt(0));
}

const TABLE_M = bytes_from_base64('goBwgJMHgIctAQEBAgECAQFICzAVEAFlBwIGAgIBBCMBHhtbCzoJCQEYBAEJAQMBBSsDPAgqGAEhNgMBEgEHCgIdAzgBAQcCAgIDCQEKAhoBAgM4AQEFBAICAwMBHgIDAQsDOAEBCAEDAQMUAhYGAQM4AQEHAgICAwcDCgIeATsFAwMBBAkBKAU3AQEHAQMBBAcCCwIdAzgBAQcBAwEEBwILAhwENwIBBwEDAQQJAQoCHQNGAQQGAQEBCBICPQECBwwIYgECCQsGSgIbAQEBAQEEAjEUAQIFCwEkCQFkFBcEBAMBAwIHAwQNDAEBCgSCPwODMgQcAx0CHgJAIAkBLQMBAXUCIgF2DAQMgFsFOQoBHQIBMB8xBS8RJgkMAx4NOA4wFIAYAwEVBAEGAQIDgEZAglAhi34DgA0BYCCBqgZpAvVUBAEKIAJQAoCQAQMBBAEXBQQBUwIyEhoSDQEmCBkNLAQvDiQBQw4MAQgCLQMyAQEDAgIFAgEBKQUFAoBsCAECzrABgmEQEBCDTQGAYgGAFQWGBgMBAgUEKAMEAYAlAoG9BIEDAoAZCzEEegM1DykBAgIKBC0LBwE9AyQOEAIsAQwDMA4IBAECXAwGAYAgDBUENwIBBwICAgMJAQoCAgcDBYBAEhcBURSAawcCCRsCUhFqDWUPgIAPgHUGAQICBAEBAQKADQcCBwMBHAooBwEECAEJCy4QgRUIAQhSFgEOegYDAQECAQcBAUIFAQIBBYDbBMt5BTsHg5gBATcHBFEBCwLMKwKR4S4CF4GeBQMGCAgCBx4EgBQDhzs3BDIIAQ4BFgUBD4TQBwERAgcBAgEFgIUHgPcBPQSFYAdtB/8LmDWAcA==');
const TABLE_I = bytes_from_base64('gC0BgiEBlDsDAQGHewFUAQMB/wBeGxCAbwH/AD4gBP8LxNyAcA==');
const TABLE_D = bytes_from_base64('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');
const TABLE_L = bytes_from_base64('QRqAQmUXgH4BBzCCKQOE6gYRCAEJJFEDgA8AEIEqACA/gIEmgeKOIQacnogSK4W/AgNacwigqyIDhhZEA4ITBwQUCgM8gMkIuGAIBiAKCCAICCAIBiAaCECAhAa91wYKBwwEdoAbBIpKgqcJir1NGmAAGgCGljDXHoSHA7XZAAaA2gEDgNMBCgYAFYAwFAVrBwNYgFwDgCMDBRJ2Br74BAUoAgYUAAQO9/FQuh3O5AObCYKaBNPigEsK3zcHGmIGGgAqBuBSBAUoAgYUCwO/SQAGgNoBA4DTAQoGAwaAMAIGDAIGDAIDDAwEn7qDkyj/AUWwgAgkgOCAHAuA/gEPGAEHIIGjA/8BiGWERzP/AZaAi20gl4DVACD/ACvA5SAa/wJcfQAaAAAaAAAHAAESEAAaDwAaAA0EGgEICgAEIwMHDgELEAAaHQAaAAMEBgIIDAEHEgEaIwMEBgEFCgUHFAEaIwAaAAAaAAAaAAAaAAAaAAAaAAAaAAAaAAAaAAAaAAAaAAAaAAQRhiABByQBESMCBiYHESUBByQBESMCBiYHESUBByQBESMCBiYHESUBByQBESMCBiYHESUBByQBESMCBiYLCoanAAoAAAoAAAoAAAoAkIAi/wNSZIRoBP8DRj0cBABdAwIdAwCCAhqLRYomCmE=');
const TABLE_W = [
	'',
	'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',
	'spbg2oAAFzZnRoAZ4HEhBsLiwsOAAQ=='
].map(bytes_from_base64);

class TableReader {
	constructor(table) {
		this.table = table;
		this.pos = 0;
	}
	get more() {
		return this.pos < this.table.length;
	}
	read() { // unsigned pseudo-huffman (note: assumes tables are valid)
		let {table, pos} = this;
		let x0 = table[pos];
		if (x0 < 0x80) {
			this.pos += 1;
			return x0;
		}
		if (x0 < 0xFF) {
			this.pos += 2;
			return 0x80 + ((x0 & 0x7F) << 8) + table[pos+1];
		}
		this.pos += 4;
		return 0x7F80 + (table[pos+1] << 16) + (table[pos+2] << 8) + table[pos+3];
	}
	read_signed() { // eg. [0,1,2,3...] => [0,-1,1,-2,...]
		let i = this.read();		
		return (i & 1) ? -(i >> 1) : (i >> 1);
	}
}

// member are 2-tuples [unsigned(cp), n] 
function lookup_member(table, cp) {
	let x = 0;
	let r = new TableReader(table); 
	while (r.more) {
		x += r.read();
		let d = cp - x;
		if (d < 0) break;
		let n = r.read();
		if (d < n) return true;
		x += n;
	}
	return false;
}

// linear are 3-tuples [unsigned(cp), n, signed(mapped)]
function lookup_linear(table, cp) {
	let x = 0, y = 0;
	let r = new TableReader(table);
	while (r.more) {
		x += r.read();
		let d = cp - x;
		if (d < 0) break;
		let n = r.read();
		y += r.read_signed();		
		if (d < n) return String.fromCodePoint(y + d);
		x += n;
	}
}

// mapped are (1+w)-tuples [unsigned(cp), signed(mapped...)]
function lookup_mapped(table, width, cp) {
	let x = 0, y = 0;
	let r = new TableReader(table);
	while (r.more) {
		x += r.read();
		if (x > cp) break;
		if (x == cp) {
			let v = [];
			for (let j = 0; j < width; j++) {
				v.push(y += r.read_signed());
			}
			return String.fromCodePoint(...v);
		}
		for (let j = 0; j < width; j++) {
			y += r.read_signed();
		}
	}
}

// adapted from https://github.com/mathiasbynens/punycode.js
// overflow removed because only used after idna
// note: not safe to export for general use
// string -> string
function puny_decode(input) {
	let output = [];
	
	let index = input.lastIndexOf('-');
	for (let i = 0; i < index; ++i) {
		let code = input.charCodeAt(i);
		if (code >= 0x80) throw new Error('punycode: expected basic');
		output.push(code);
	}
	index++; // skip delimiter
	
	// https://datatracker.ietf.org/doc/html/rfc3492#section-3.4
	const BASE = 36; 
	const T_MIN = 1;
	const T_MAX = 26;
	const DELTA_SKEW = 38;
	const DELTA_DAMP = 700;
	const BASE_MIN = BASE - T_MIN;
	const MAX_DELTA = (BASE_MIN * T_MAX) >> 1;

	let bias = 72;
	let n = 0x80;

	let i = 0;
	const {length} = input;
	while (index < length) {
		let prev = i;
		for (let w = 1, k = BASE; ; k += BASE) {
			if (index >= length) throw new Error('punycode: invalid');
			let code = input.charCodeAt(index++)
			if (code < 0x3A) { // 30 + 0A
				code -= 0x16;
			} else if (code < 0x5B) { // 41 + 1A
				code -= 0x41;
			} else if (code < 0x7B) { // 61 + 1A
				code -= 0x61;
			} else {
				throw new Error(`punycode: invalid byte ${code}`);
			}
			i += code * w;
			const t = k <= bias ? T_MIN : (k >= bias + T_MAX ? T_MAX : k - bias);
			if (code < t) break;
			w *= BASE - t;
		}
		const out = output.length + 1;
		let delta = i - prev;
		delta = prev == 0 ? (delta / DELTA_DAMP)|0 : delta >> 1;
		delta += (delta / out)|0;
		let k = 0;
		while (delta > MAX_DELTA) {
			delta = (delta / BASE_MIN)|0;
			k += BASE;
		}
		bias = (k + BASE * delta / (delta + DELTA_SKEW))|0;
		n += (i / out)|0;
		i %= out;
		output.splice(i++, 0, n);
	}	
	return String.fromCodePoint(...output);
}

export function is_disallowed(cp) {
	return lookup_member(TABLE_D, typeof cp === 'string' ? cp.codePointAt(0) : cp);
}

export function is_ignored(cp) {
	return lookup_member(TABLE_I, typeof cp === 'string' ? cp.codePointAt(0) : cp);
}

export function is_combining_mark(cp) {
    return lookup_member(TABLE_M, typeof cp === 'string' ? cp.codePointAt(0) : cp);
}

// returns mapped string or undefined
// warning: this does not check if disallowed/ignored
export function get_mapped(cp) {
	if (typeof cp === 'string') cp = cp.codePointAt(0);
	let mapped = lookup_linear(TABLE_L, cp);
	if (mapped) return mapped;
	for (let i = 0; i < TABLE_W.length; i++) {
		mapped = lookup_mapped(TABLE_W[i], i + 1, cp);
		if (mapped) return mapped;	
	}
}

export function idna(s) {
	return [...s].map(c => {
		let cp = c.codePointAt(0);
		if (is_disallowed(cp)) throw new Error(`disallowed: 0x${cp.toString(16)}`); //new Error(`disallowed: ${cp} 0x${cp.toString(16)} ${c}`);
		if (is_ignored(cp)) return ''; 
		return get_mapped(cp) ?? c;
	}).join('').normalize('NFC');
}

// primary api
export function ens_normalize(name) {
	return idna(name).split('.').map(s => {
		if (s.startsWith('xn--')) {
			s = puny_decode(s.slice(4));
			if (idna(s) !== s) throw new Error(`puny-idna mismatch on label: ${s}`); // can this happen?
		}
		if (s.length >= 4 && s[2] == '-' && s[3] == '-') throw new Error(`double-hyphen at label[3:4]: ${s}`);
		if (s.startsWith('-')) throw new Error(`hyphen at label start: ${s}`);
		if (s.endsWith('-')) throw new Error(`hyphen at label end: ${s}`);
		if (s.length > 0 && is_combining_mark(s)) throw new Error('mark at label start: ${s}');
		return s;
	}).join('.');
}