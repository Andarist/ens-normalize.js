export const VERSION="1.1.1";export const UNICODE="14.0.0";class A{constructor(e){let n=0;let t=0;let c=[];A:for(let A of e){n=n<<8|A;t+=8;while(t>=3){switch(n>>t-2&3){case 3:if(t<10)continue A;c.push(n>>(t-=10)&255);continue;case 2:if(t<6)continue A;c.push(n>>(t-=6)&15);continue;default:c.push(n>>(t-=3)&3)}}}this.buf=c;this.pos=0}read(){let{buf:A,pos:e}=this;let n=A[e];if(n<128){this.pos+=1;return n}if(n<255){this.pos+=2;return 128+((n&127)<<8|A[e+1])}this.pos+=4;return 32640+(A[e+1]<<16|A[e+2]<<8|A[e+3])}A(){let A=this.read();return A&1?~A>>1:A>>1}t(e){let n=Array(e);for(let A=0;A<e;A++)n[A]=1+this.read();return n}O(n){let t=Array(n);for(let A=0,e=-1;A<n;A++)t[A]=e+=1+this.read();return t}B(n){let t=Array(n);for(let A=0,e=0;A<n;A++)t[A]=e+=this.A();return t}l(){let A=this.O(this.read());let e=this.read();let n=this.O(e);let t=this.t(e);return[...A.map(A=>[A,1]),...n.map((A,e)=>[A,t[e]])].sort((A,e)=>A[0]-e[0])}k(){let n=[];for(let A=this.read(),e=0;e<A;e++){n.push(this.i())}for(let A=1+this.read(),e=1;e<A;e++){n.push(this.v(e))}return n.flat().sort((A,e)=>A[0]-e[0])}J(t,e){let c=[this.B(t)];for(let A=1;A<e;A++){let e=Array(t);let n=c[A-1];for(let A=0;A<t;A++){e[A]=n[A]+this.A()}c.push(e)}return c}v(A){let e=this.read();let n=this.O(e);let t=this.J(e,A);return n.map((A,e)=>[A,t.map(A=>A[e])])}i(){let A=1+this.read();let n=1+this.read();let t=this.read();let e=1+this.read();let c=this.O(e);let O=this.t(e);let r=this.J(e,A);return c.map((A,e)=>[A,r.map(A=>A[e]),O[e],n,t])}G(){let r=[];for(let A=this.read();A>0;A--){let e=1+this.read();let n=1+this.read();let t=1+this.read();let c=[];let O=[];for(let A=0;A<e;A++)O.push([]);for(let A=0;A<n;A++){if(t&1<<A-1){n++;c.push(A);O.forEach(A=>A.push(8205))}else{this.B(e).forEach((A,e)=>O[e].push(A))}}for(let e of c){let A=r[e];if(!A)r[e]=A=[];A.push(...O)}}return r}}function t(A){return A.replace(/[^\.\-a-z0-9]/giu,A=>`{${A.codePointAt(0).toString(16).toUpperCase()}}`)}let e=new A(Uint8Array.from(atob(""),A=>A.charCodeAt(0)));const n=e.l();const c=e.l();const O=e.l();const r=e.l();const B=e.l();const l=e.l();const f=e.l();const y=e.G();const w=e.k();e=null;function k(A,t){for(let[e,n]of A){let A=t-e;if(A<0)break;if(A<n)return true}return false}function x(r){for(let[e,n,t,c,O]of w){let A=r-e;if(A<0)break;if(t>0){if(A<t&&A%c==0){let e=A/c;return n.map(A=>A+e*O)}}else if(A==0){return n}}}export function is_zwnj_emoji(c,O){let{length:r}=c;for(let t=Math.min(O,y.length);t>0;t--){let e=y[t];if(!e)continue;A:for(let A of e){let n=O-t;for(let e of A){if(n>=r)continue A;let A=c[n];if(A===65039){n++;continue}else if(e!=c[n++]){continue A}}return true}}return false}function i(t){let c=[];let O=t.lastIndexOf("-");for(let e=0;e<O;++e){let A=t.charCodeAt(e);if(A>=128)throw new Error("punycode: expected basic");c.push(A)}O++;const r=36;const B=1;const l=26;const f=38;const y=700;const w=r-B;const k=w*l>>1;let x=72;let i=128;let v=0;const{length:s}=t;while(O<s){let A=v;for(let e=1,n=r;;n+=r){if(O>=s)throw new Error("punycode: invalid");let A=t.charCodeAt(O++);if(A<58){A-=22}else if(A<91){A-=65}else if(A<123){A-=97}else{throw new Error(`punycode: invalid byte ${A}`)}v+=A*e;const G=n<=x?B:n>=x+l?l:n-x;if(A<G)break;e*=r-G}const J=c.length+1;let e=v-A;e=A==0?e/y|0:e>>1;e+=e/J|0;let n=0;while(e>k){e=e/w|0;n+=r}x=n+r*e/(e+f)|0;i+=v/J|0;v%=J;c.splice(v++,0,i)}return String.fromCodePoint(...c)}function v(A){return k(f,A)}function s(A){return k(n,A)}export function is_disallowed(A){return k(O,A)}export function is_ignored(A){return k(c,A)}export function get_mapped(A){return x(A)?.slice()}export class DisallowedLabelError extends Error{constructor(A,e){super(`Disallowed label "${t(e)}": ${A}`);this.label=e}}export class DisallowedCharacterError extends Error{constructor(A,e,n=""){super(`Disallowed character "${t(String.fromCodePoint(A))}" at position ${1+e}`+(n?`: ${n}`:""));this.codePoint=A;this.offset=e}}export function idna(A,t=false){if(typeof A!=="string")throw new TypeError("expected string");let c=[...A].map(A=>A.codePointAt(0));const O=[];return String.fromCodePoint(...c.map((e,n)=>{if(is_disallowed(e)){if(t)return O;throw new DisallowedCharacterError(e,n)}if(is_ignored(e))return O;if(e===8204){if(n>0&&v(c[n-1])){return e}if(n>0&&n<c.length-1){let A=n-1;while(A>0&&k(r,c[A]))A--;if(k(B,c[A])){let A=n+1;while(A<c.length-1&&k(r,c[A]))A++;if(k(l,c[A])){return e}}}if(t)return O;throw new DisallowedCharacterError(e,n,`ZWJ outside of context`)}else if(e===8205){if(n>0&&v(c[n-1])){return e}if(is_zwnj_emoji(c,n)){return e}if(t)return O;throw new DisallowedCharacterError(e,n,`ZWNJ outside of context`)}return x(e)??e}).flat()).normalize("NFC")}export function ens_normalize(A,e=false){return idna(A,e).split(".").map(e=>{if(e.startsWith("xn--")){let A=i(e.slice(4));if(A!=idna(A,true))throw new DisallowedLabelError(`puny not idna`,e);e=A}if(/^.{2}--/u.test(e))throw new DisallowedLabelError(`double-hyphen at position 3`,e);if(e.startsWith("-"))throw new DisallowedLabelError(`leading hyphen`,e);if(e.endsWith("-"))throw new DisallowedLabelError(`trailing hyphen`,e);if(e.length>0&&s(e.codePointAt(0)))throw new DisallowedLabelError(`leading combining mark`,e);return e}).join(".")}